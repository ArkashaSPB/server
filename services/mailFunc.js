import { connectToDatabase } from '../func/db.js';

// üì© –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∏—Å–µ–º
export const getAllMails = async () => {
	const connection = await connectToDatabase();
	try {
		const [rows] = await connection.execute('SELECT * FROM email');
		return rows;
	} catch (error) {
		throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤—Å–µ—Ö –ø–∏—Å–µ–º: ' + error.message);
	} finally {
		await connection.end();
	}
};

// üì© –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∏—Å—å–º–∞ –ø–æ ID
export const getMailById = async (id) => {
	const connection = await connectToDatabase();
	try {
		const [rows] = await connection.execute('SELECT * FROM email WHERE id = ?', [id]);
		if (rows.length === 0) {
			throw new Error('–ü–∏—Å—å–º–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
		}
		return rows[0];
	} catch (error) {
		throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–∏—Å—å–º–∞: ' + error.message);
	} finally {
		await connection.end();
	}
};

// ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Å—å–º–∞
export const updateMail = async (id, data) => {
	const connection = await connectToDatabase();
	try {
		// –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—è id –∏ name
		const keys = Object.keys(data.selectedEmail).filter(key => key !== 'id' && key !== 'name');
		// –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–ø—Ä–æ—Å–∞ –≤–∏–¥–∞ "–ø–æ–ª–µ1 = ?, –ø–æ–ª–µ2 = ? ..."
		const setClause = keys.map(key => `${key} = ?`).join(', ');
		const values = keys.map(key => data.selectedEmail[key]);

		console.log(setClause, values)

		const sql = `UPDATE email SET ${setClause} WHERE id = ?`;
		await connection.query(sql, [...values, id]);



		return { success: true, message: '–ü–∏—Å—å–º–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ' };
	} catch (error) {
		throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞: ' + error.message);
	} finally {
		await connection.end();
	}
};








export const addColumnFunc = async (lang) => {
	const connection = await connectToDatabase();
	let resultMessage = '';
	try {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ subject_{lang}
		let [rows] = await connection.query(
			"SHOW COLUMNS FROM email LIKE ?",
			[`subject_${lang}`]
		);
		if (rows.length === 0) {
			await connection.query(
				`ALTER TABLE email ADD COLUMN subject_${lang} VARCHAR(255)`
			);
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞
			[rows] = await connection.query(
				"SHOW COLUMNS FROM email LIKE ?",
				[`subject_${lang}`]
			);
			if (rows.length === 0) {
				resultMessage += `–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É subject_${lang}. `;
			} else {
				resultMessage += `–ö–æ–ª–æ–Ω–∫–∞ subject_${lang} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞. `;
			}
		} else {
			resultMessage += `–ö–æ–ª–æ–Ω–∫–∞ subject_${lang} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. `;
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ text_{lang}
		[rows] = await connection.query(
			"SHOW COLUMNS FROM email LIKE ?",
			[`text_${lang}`]
		);
		if (rows.length === 0) {
			await connection.query(
				`ALTER TABLE email ADD COLUMN text_${lang} TEXT`
			);
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞
			[rows] = await connection.query(
				"SHOW COLUMNS FROM email LIKE ?",
				[`text_${lang}`]
			);
			if (rows.length === 0) {
				resultMessage += `–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É text_${lang}. `;
			} else {
				resultMessage += `–ö–æ–ª–æ–Ω–∫–∞ text_${lang} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞. `;
			}
		} else {
			resultMessage += `–ö–æ–ª–æ–Ω–∫–∞ text_${lang} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. `;
		}

		return { success: true, message: resultMessage };
	} catch (error) {
		throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: " + error.message);
	} finally {
		await connection.end();
	}
};


export const removeColumnFunc = async (lang) => {
	const connection = await connectToDatabase();
	let resultMessage = '';
	try {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ subject_{lang}
		let [rows] = await connection.query(
			"SHOW COLUMNS FROM email LIKE ?",
			[`subject_${lang}`]
		);
		if (rows.length > 0) {
			await connection.query(
				`ALTER TABLE email DROP COLUMN subject_${lang}`
			);
			resultMessage += `–ö–æ–ª–æ–Ω–∫–∞ subject_${lang} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞. `;
		} else {
			resultMessage += `–ö–æ–ª–æ–Ω–∫–∞ subject_${lang} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. `;
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ text_{lang}
		[rows] = await connection.query(
			"SHOW COLUMNS FROM email LIKE ?",
			[`text_${lang}`]
		);
		if (rows.length > 0) {
			await connection.query(
				`ALTER TABLE email DROP COLUMN text_${lang}`
			);
			resultMessage += `–ö–æ–ª–æ–Ω–∫–∞ text_${lang} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞. `;
		} else {
			resultMessage += `–ö–æ–ª–æ–Ω–∫–∞ text_${lang} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. `;
		}

		return { success: true, message: resultMessage };
	} catch (error) {
		throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: " + error.message);
	} finally {
		await connection.end();
	}
};

export const getLanguagesList = async () => {
	const connection = await connectToDatabase();
	try {
		// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "subject_" –∏–ª–∏ "text_"
		const [rows] = await connection.query(
			"SHOW COLUMNS FROM email WHERE Field LIKE 'subject_%' "
		);

		console.log(rows)

		// –ò–∑–≤–ª–µ–∫–∞–µ–º —è–∑—ã–∫–æ–≤—ã–µ –∫–æ–¥—ã, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω–∏ –∏–¥—É—Ç –ø–æ—Å–ª–µ "subject_" –∏–ª–∏ "text_"
		const languages = rows.map(row => {
			const match = row.Field.match(/_(\w+)$/);
			return match ? match[1] : null;
		}).filter(lang => lang !== null);

		return languages;
	} catch (error) {
		throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: " + error.message);
	} finally {
		await connection.end();
	}
};


